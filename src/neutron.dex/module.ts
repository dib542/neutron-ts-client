// Generated by Ignite ignite.com/cli

import { StdFee } from "@cosmjs/launchpad";
import { SigningStargateClient, DeliverTxResponse } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgCancelLimitOrder } from "./types/neutron/dex/tx";
import { MsgWithdrawFilledLimitOrder } from "./types/neutron/dex/tx";
import { MsgWithdrawal } from "./types/neutron/dex/tx";
import { MsgUpdateParams } from "./types/neutron/dex/tx";
import { MsgDeposit } from "./types/neutron/dex/tx";
import { MsgMultiHopSwap } from "./types/neutron/dex/tx";
import { MsgPlaceLimitOrder } from "./types/neutron/dex/tx";

import { DepositRecord as typeDepositRecord} from "./types"
import { LimitOrderExpiration as typeLimitOrderExpiration} from "./types"
import { LimitOrderTrancheKey as typeLimitOrderTrancheKey} from "./types"
import { LimitOrderTranche as typeLimitOrderTranche} from "./types"
import { LimitOrderTrancheUser as typeLimitOrderTrancheUser} from "./types"
import { PairID as typePairID} from "./types"
import { Params as typeParams} from "./types"
import { Pool as typePool} from "./types"
import { PoolMetadata as typePoolMetadata} from "./types"
import { PoolReservesKey as typePoolReservesKey} from "./types"
import { PoolReserves as typePoolReserves} from "./types"
import { TickLiquidity as typeTickLiquidity} from "./types"
import { TradePairID as typeTradePairID} from "./types"
import { DepositOptions as typeDepositOptions} from "./types"
import { MultiHopRoute as typeMultiHopRoute} from "./types"

export { MsgCancelLimitOrder, MsgWithdrawFilledLimitOrder, MsgWithdrawal, MsgUpdateParams, MsgDeposit, MsgMultiHopSwap, MsgPlaceLimitOrder };

type sendMsgCancelLimitOrderParams = {
  value: MsgCancelLimitOrder,
  fee?: StdFee,
  memo?: string
};

type sendMsgWithdrawFilledLimitOrderParams = {
  value: MsgWithdrawFilledLimitOrder,
  fee?: StdFee,
  memo?: string
};

type sendMsgWithdrawalParams = {
  value: MsgWithdrawal,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendMsgDepositParams = {
  value: MsgDeposit,
  fee?: StdFee,
  memo?: string
};

type sendMsgMultiHopSwapParams = {
  value: MsgMultiHopSwap,
  fee?: StdFee,
  memo?: string
};

type sendMsgPlaceLimitOrderParams = {
  value: MsgPlaceLimitOrder,
  fee?: StdFee,
  memo?: string
};


type msgCancelLimitOrderParams = {
  value: MsgCancelLimitOrder,
};

type msgWithdrawFilledLimitOrderParams = {
  value: MsgWithdrawFilledLimitOrder,
};

type msgWithdrawalParams = {
  value: MsgWithdrawal,
};

type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type msgDepositParams = {
  value: MsgDeposit,
};

type msgMultiHopSwapParams = {
  value: MsgMultiHopSwap,
};

type msgPlaceLimitOrderParams = {
  value: MsgPlaceLimitOrder,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgCancelLimitOrder({ value, fee, memo }: sendMsgCancelLimitOrderParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCancelLimitOrder: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgCancelLimitOrder({ value: MsgCancelLimitOrder.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCancelLimitOrder: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgWithdrawFilledLimitOrder({ value, fee, memo }: sendMsgWithdrawFilledLimitOrderParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgWithdrawFilledLimitOrder: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgWithdrawFilledLimitOrder({ value: MsgWithdrawFilledLimitOrder.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgWithdrawFilledLimitOrder: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgWithdrawal({ value, fee, memo }: sendMsgWithdrawalParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgWithdrawal: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgWithdrawal({ value: MsgWithdrawal.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgWithdrawal: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgDeposit({ value, fee, memo }: sendMsgDepositParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgDeposit: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgDeposit({ value: MsgDeposit.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgDeposit: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgMultiHopSwap({ value, fee, memo }: sendMsgMultiHopSwapParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgMultiHopSwap: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgMultiHopSwap({ value: MsgMultiHopSwap.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgMultiHopSwap: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgPlaceLimitOrder({ value, fee, memo }: sendMsgPlaceLimitOrderParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgPlaceLimitOrder: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry, prefix});
				let msg = this.msgPlaceLimitOrder({ value: MsgPlaceLimitOrder.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgPlaceLimitOrder: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgCancelLimitOrder({ value }: msgCancelLimitOrderParams): EncodeObject {
			try {
				return { typeUrl: "/neutron.dex.MsgCancelLimitOrder", value: MsgCancelLimitOrder.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCancelLimitOrder: Could not create message: ' + e.message)
			}
		},
		
		msgWithdrawFilledLimitOrder({ value }: msgWithdrawFilledLimitOrderParams): EncodeObject {
			try {
				return { typeUrl: "/neutron.dex.MsgWithdrawFilledLimitOrder", value: MsgWithdrawFilledLimitOrder.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgWithdrawFilledLimitOrder: Could not create message: ' + e.message)
			}
		},
		
		msgWithdrawal({ value }: msgWithdrawalParams): EncodeObject {
			try {
				return { typeUrl: "/neutron.dex.MsgWithdrawal", value: MsgWithdrawal.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgWithdrawal: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/neutron.dex.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		msgDeposit({ value }: msgDepositParams): EncodeObject {
			try {
				return { typeUrl: "/neutron.dex.MsgDeposit", value: MsgDeposit.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgDeposit: Could not create message: ' + e.message)
			}
		},
		
		msgMultiHopSwap({ value }: msgMultiHopSwapParams): EncodeObject {
			try {
				return { typeUrl: "/neutron.dex.MsgMultiHopSwap", value: MsgMultiHopSwap.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgMultiHopSwap: Could not create message: ' + e.message)
			}
		},
		
		msgPlaceLimitOrder({ value }: msgPlaceLimitOrderParams): EncodeObject {
			try {
				return { typeUrl: "/neutron.dex.MsgPlaceLimitOrder", value: MsgPlaceLimitOrder.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgPlaceLimitOrder: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						DepositRecord: getStructure(typeDepositRecord.fromPartial({})),
						LimitOrderExpiration: getStructure(typeLimitOrderExpiration.fromPartial({})),
						LimitOrderTrancheKey: getStructure(typeLimitOrderTrancheKey.fromPartial({})),
						LimitOrderTranche: getStructure(typeLimitOrderTranche.fromPartial({})),
						LimitOrderTrancheUser: getStructure(typeLimitOrderTrancheUser.fromPartial({})),
						PairID: getStructure(typePairID.fromPartial({})),
						Params: getStructure(typeParams.fromPartial({})),
						Pool: getStructure(typePool.fromPartial({})),
						PoolMetadata: getStructure(typePoolMetadata.fromPartial({})),
						PoolReservesKey: getStructure(typePoolReservesKey.fromPartial({})),
						PoolReserves: getStructure(typePoolReserves.fromPartial({})),
						TickLiquidity: getStructure(typeTickLiquidity.fromPartial({})),
						TradePairID: getStructure(typeTradePairID.fromPartial({})),
						DepositOptions: getStructure(typeDepositOptions.fromPartial({})),
						MultiHopRoute: getStructure(typeMultiHopRoute.fromPartial({})),
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const Module = (test: IgniteClient) => {
	return {
		module: {
			NeutronDex: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default Module;